S -> Cons S | Define S | Switch S | Assign S | If S | Loop S | Define | Assign | If | Loop | Cons | Switch

Cons -> "const" Define


Define -> "int" Variables ";" | "int" Variables "=" Values ";" | "bool" Variables ";" | "bool" Variables "=" BValue ";" |
          "float" Variables ";" | "float" Variables "=" FValues ";" | "var" Variables ";"
          "var" Variables "=" AValues ";" 

Variables -> Id "," Variables | Id

AssignOp -> "+=" | "-=" | "*=" | "/=" | "%=" | "="

AValues -> Values | BValues | FValues 

Values -> Expr "," Values | Expr

BValues -> Condition "," BValues | Condition

Expr -> Expr "+" Term |
        Expr "-" Term | Term

Term -> Term "*" Power |
        Term "%" Power |
        Term "/" Power | Power

Power -> Power "^" Factor | Factor

Factor -> Id | Number | "(" Expr ")" | "+"Number | "-"Number

FValues -> Fxpr "," FValues | Fxpr

Fxpr -> Fxpr "+" Ferm |
        Fxpr "-" Ferm | Ferm

Ferm -> Ferm "*" Fower |
        Factorerm "%" Fower |
        Ferm "/" Fower | Fower

Fower -> Fower "^" Flact | Flact

Flact -> Id | FlNumber | "(" Fxpr ")" 


Assign ->  Variables AssignOp Values ";" |
           Variables "=" BValues ";" |
           Variables AssignOp FValues ";" | Variables AssignOp Aalues ";" |
           Variables"--" | Variables"++" |
           Variables "=" Condition "?" Expr

If -> "if" Condition ":" "begin" Statement "end" Elif Else |
      "if" Condition ":" "begin" Statement "end" Else |
      "if" Condition ":" "begin" Statement "end" Elif |
      "if" Condition ":" "begin" Statement "end" |
      "if" Condition ":" "begin" "end" Elif Else |
      "if" Condition ":" "begin" "end" Else |
      "if" Condition ":" "begin" "end" Elif |
      "if" Condition ":" "begin" "end"

Elif -> "elif" Condition ":" "begin" Statement "end" Elif |
		"elif" Condition ":" "begin" Statement "end" |
		"elif" Condition ":" "begin" "end" Elif | 
		"elif" Condition ":" "begin" "end"

Else -> "else" ":" "begin" Statement "end" |
		"else" ":" "begin" "end" 


Statement -> Assign Statement | If Statement | Loop Statement | Assign | If | Loop

Switch -> "switch" "(" Expr ")" "{" Cases Default "}"
Cases -> "case" Expr ":" Statement "break" ";" Cases | "case" Expr ":" Statement "break" ";"
Default -> "default" ":" Statement "break" ";" | Îµ

Condition -> Condition "and" SubCondition | 
	     Condition "or" SubCondition | 
             Condition "xor" SubCondition | SubCondition

SubCondition -> "True" | "False" | Expr | Expr Relational Expr |
					  "(" Condition ")" 

Relational -> ">" | "<" | ">=" | "<=" | "==" | "!="

Loop -> "loopc" Condition ":" "begin" Statement "end" 
      | "do" "{" Statement "}" "while" "(" Condition ")" 
      | "for" "(" Define ";" Condition ";" Assign ")" "{" Statement "}"

Print -> "print" "(" Expr ")" ";" 
       | "print" "(" Id ")" ";"
	